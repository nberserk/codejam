package topcoder.graph.bfs;

import java.awt.Point;
import java.util.TreeSet;

/*
 * http://community.topcoder.com/stat?c=problem_statement&pm=2274&rd=5009
 */
public class BombMan {

	static class Node implements Comparable<Node> {
		int x, y;
		int time;
		int bomb;

		public Node(int x, int y, int time, int bomb) {
			this.x = x;
			this.y = y;
			this.time = time;
			this.bomb = bomb;
		}

		@Override
		public int compareTo(Node o) {
			if (this.time < o.time) {
				return -1;
			} else if (this.time > o.time) {
				return 1;
			}

		
			if (x < o.x) {
				return -1;
			} else if (x > o.x) {
				return 1;
			}
			if (y < o.y) {
				return -1;
			} else if (y > o.y) {
				return 1;
			}
			
			if (bomb < o.bomb) {
				return -1;
			} else if (bomb > o.bomb) {
				return 1;
			}

			return 0;
		}

	}

	public String[] mMap;

	char get(int x, int y) {
		return mMap[y].charAt(x);
	}

	public int shortestPath(String[] maze, int bombs) {
		int sizeY = maze.length;
		int sizeX = maze[0].length();
		mMap = maze;
		
		Point start = null;
		Point end= null;
		
		for (int j = 0; j < sizeY; j++) {
			for (int i = 0; i < sizeX; i++) {
				// System.out.print(get(i, j));
				if (get(i,j)=='B') {
					start = new Point(i,j);
				}else if (get(i,j)=='E') {
					end = new Point(i,j);
				}
			}
			// System.out.println("\n");
		}
		
		int[][] directions = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };
		boolean[][][] v = new boolean[sizeX][sizeY][bombs + 1];
		TreeSet<Node> opened = new TreeSet<Node>();
		// v[start.x][start.y] = true;
		opened.add(new Node(start.x, start.y, 0, bombs));
		
		while (!opened.isEmpty()) {
			Node current = opened.pollFirst();

			if (v[current.x][current.y][current.bomb]) {
				continue;
			}
			v[current.x][current.y][current.bomb] = true;
			if (current.x == end.x && current.y == end.y) {
				return current.time;
			}
			
			//
			for (int i = 0; i < directions.length; i++) {
				int x = current.x + directions[i][0];
				int y = current.y + directions[i][1];

				if (x < 0 || x >= sizeX) {
					continue;
				}
				if (y < 0 || y >= sizeY) {
					continue;
				}

				char c = get(x, y);
				switch (c) {
				case '.':
				case 'E':
					opened.add(new Node(x, y, current.time + 1, current.bomb));
					break;
				case '#':
					if (current.bomb > 0) {
						opened.add(new Node(x, y, current.time + 3, current.bomb - 1));
					}
					break;
				case 'B':
					continue;
				default:
					System.out.println("Can't be here");
					break;
				}
			}
			
			
			
		}
		

		return -1;
	}

	public static void main(String[] args) {
		BombMan b = new BombMan();
		int time = b.shortestPath(new String[] { new String(".....B."),
			 new String(".#####."),
			 new String(".#...#."),
			 new String(".#E#.#."),
 new String(".###.#."), new String(".......") }, 1);
		System.out.println(time);

		time = b.shortestPath(new String[] { "B.#.#.#...E" }, 2);
		System.out.println(time);

		time = b.shortestPath(new String[] { new String("..#####"), new String("B.#####"), new String("..#####"),
				new String("#######"), new String("####..."), new String("####.E.") }, 4);
		System.out.println(time);

		time = b.shortestPath(new String[] { new String(".#.#.#.#B#...#.#...#.#...#.#...#.#...#.#.#......."),
				new String(".#.#.#.#.#.###.###.#.###.#.#.###.###.#.#.#.###.##"),
				new String(".#.#.#...#.#.#.#.#.#...#.....#.#.#...#...#.#.#..."),
				new String(".#.#.###.#.#.#.#.#.###.#.#####.#.###.###.#.#.###."),
				new String(".............#.#...#...#.....#.#.#...#.#.#.....#."),
				new String("##.#######.###.#.#####.#.#####.#.###.#.#.#.#.####"),
				new String(".#.#.....#...#...#.#...#...#.#.#...#...#...#....."),
				new String(".#######.#.#####.#.#.#.#.###.#.###.#.#####.#.####"),
				new String(".#.#.#.#...#.#.#.#.#.#.......#...#.#...#.#.#....."),
				new String(".#.#.#.###.#.#.#.#.#####.#####.###.###.#.#.######"),
				new String(".....#...#.#...#...#...#...#...#...#.#.#........."),
				new String("####.###.#.###.###.#.###.#.#.###.###.#.#.########"),
				new String(".......#.........#.#.#.#.#.#.#.#.........#...#..."),
				new String(".#.###.#########.#.#.#.#.###.#.#####.#.#.#.###.##"),
				new String(".#.#.........#.#.#.#.#.....#.#.#.....#.#........."),
				new String("############.#.#.#.#.#.#####.#.#.################"),
				new String(".#...........#...#.#.#.#...#.#.#...#.#.#.....#..."),
				new String(".#####.#####.###.#.#.#.#.###.#.#.###.#.#.#####.##"),
				new String(".......#...#.#.#.....#...#...#.#.#.#.#..........."),
				new String("##########.#.#.#####.#.###.###.#.#.#.#.##########"),
				new String(".....#...#.....#.#...#.......#.#...#.......#....."),
				new String("##.#.###.#.###.#.#.#.#.#####.#.#.###.#######.####"),
				new String("...#...#...#.......#.....#.#...#...#.......#....."),
				new String("####.#.#.#########.#.###.#.#####.###.#.#######.##"),
				new String(".#...#...#.........#.#.....#.........#.#.#.#....."),
				new String(".#####.#.#.###.#######.#.###.#.#########.#.#.####"),
				new String(".......#.#.#...#.......#.....#.#.#.......#.#.#.#."),
				new String("########.#.#.#.#####.#.###.#.###.#.#######.#.#.#."),
				new String(".........#.#.#.#.....#...#.#.........#.#........."),
				new String("################.#.#.#.#.#.#.#.#######.#.########"),
				new String(".................#.#.#.#.#.#.#...........#......."),
				new String("########.#####.#.###.#.#.#####.###.#.#####.###.##"),
				new String(".........#...#.#...#.#.#...#.....#.#.........#..."),
				new String(".#####.#####.#.###.#.###.#.#.#.#.#.#####.#.###.#."),
				new String(".#.....#.........#.#.#...#.#.#.#.#.#.....#...#.#."),
				new String("####.#####.###.#.#.#.#.#.#.###.###.#.#.#.#.#####."),
				new String(".....#.....#.#.#.#.#.#.#.#.#...#...#.#.#.#...#..."),
				new String("####.#.#.###.#.#.###.#.###.#.#.#####.#.#.#.######"),
				new String(".....#.#.#.#...#...#.#...#.#.#...#...#.#.#......."),
				new String("##########.#.#.#.#####.###.#.#.###.#.###.#####.##"),
				new String("...#.#...#...#.#.....#.#...#.#...#.#.#.......#..."),
				new String(".#.#.#.#.#.#.#.#.#.#.###.#.#########.###.#.#.#.#."),
				new String(".#.#...#...#.#.#.#.#...#.#...#.......#...#.#.#.#."),
				new String("##.###.#.#.###.#.#.#.#.#####.#.#.#.###.#.########"),
				new String(".......#.#...#.#.#.#.#.#.....#.#.#...#.#........."),
				new String("####.#######.#.#####.#.###.#.#.###.#.#.#.########"),
				new String("E..#.......#.#.....#.#.#.#.#.#.#...#.#.#........."),
				new String("##.#.#.#.###.###.###.###.#.#.###.#.#.#.#.#######."),
				new String(".....#.#...#.#.....#.#.....#...#.#.#.#.#.....#...") }, 3);
		System.out.println(time);

		time = b.shortestPath(new String[] { new String(".#..#......#..##.#...#..####......#.#...#.#...#..#"),
				new String("..#...#..##..##...#.....##..##.#....##..##....#..#"),
				new String(".#..##..##.......#...#..........##...####......###"),
				new String("..###.##..#.....##..###...####.#....#..##...#.#..."),
				new String("###.#.#.#..#........#.....#..#.#.#.#....#..#..#.#."),
				new String("#.#.##...####.###...#####.#.#.#..###.......#..##.#"),
				new String("##.........#.##..##.#.###..##..#.#...#.##....###.."),
				new String("###.###.#.##...####.##.#.#.###...#..#.###..#.#..##"),
				new String("...#..#...#.#.###..#...###.#.####.#.###.#...##.#.#"),
				new String("..........###...#.###.....#.##.##...#.#....#...#.#"),
				new String("#..#.#.#.##.##.##.....##.###.##.#.##.###...####..#"),
				new String("..#..#...#....#.##.#.##..##..#...##...#..#######.."),
				new String("#.#...#.#..#....#..#####..#.##..#..##.#..#####...#"),
				new String(".........#.###.##.#.##...#...#..##...#....##..#.##"),
				new String("#...###...#......#.#.###..##..#.#####.####.##...##"),
				new String("..###.##.#....###..........#.#.##....##..#.###...#"),
				new String("#..###...##.##..###..#...#######....#.#..#...###.."),
				new String("#.#####..###...#.##..#.#.#.###......#.###.#.#.#..."),
				new String("...#..#.###.###..###.##..#.#..##...###..#.#..#..#."),
				new String("#.##.#......##...#.#.....##.##.#####..##.##..#.##."),
				new String("#.#.#..#.###..#...#...#..#....#...###......##..#.."),
				new String("##.#.##.#..##..#..###..#..#####...#..###.#.#.#..#."),
				new String("#####...#.#...#.#.......##.##.#..#.#.##.#..##...#."),
				new String(".#.##.#.##..####..##...........#.###..#####.#.#..#"),
				new String(".###.#.###.##.#.#..#.###..#..##.#.#.##.......##.#."),
				new String("##......#.#.#....###.....B.....##..#.###.#..###..."),
				new String("#.###...##.####...##..###....#.#.##.#.#####....#.#"),
				new String("..#####..#...##..........#.#.##...###..#.#...#...#"),
				new String("..##.#...#.#.#.###...#.#..###.#..#..##.#..###...##"),
				new String("#...##.....#.#....#....#.###.##.####..#..#.##....."),
				new String("#..####...#####.##...#..######.#.#.#..#......###.."),
				new String("..#.#.#...#....#.......#..##.#.##...#.#.#...#..#.#"),
				new String("###..##.##...##....#..#....#...#..#............#.."),
				new String("#.######..###.#..#..#..#..#.#.#.#....####.#....#.#"),
				new String("..####............#.#.#.####.#...##..##.###....#.#"),
				new String(".#.#....#..#..###........###..##..#.#.#....##..#.."),
				new String("..#.......##.##...####.#..###..#....#.#.##.......#"),
				new String("####.#...#....#.##.#..#.#.##.#...###.##..#.#.#.###"),
				new String("#..##..###.####..##......#....#.....#...###.###.##"),
				new String(".#.####..##.#.##.##..#..#...##....##.....####....."),
				new String("####....######..#......#..#...##.##..####...###.#."),
				new String("#.##..##...##..###.#.#....#......###........#...#."),
				new String("##...#.#.#.#.#.....###...#####..#..#.##....#.##..#"),
				new String(".#....###...#.#..##.##..##..##.#.#.#.##.##..##.#.#"),
				new String("..########.....#..#...#.#.#.###..#..#.####.###..##"),
				new String("####..#.#...#..#.####...###...####...##..#.#######"),
				new String("##...#####.###...#......#.#.......#..##....#..#.##"),
				new String("...##.##..#...##...#....#.##..#.....##...###..##.."),
				new String("##...#.#.##..##.##........#..#...#..#..#.....##.#."),
				new String("E.##.#.###...#.#####.#.####..#..#..#..###..##.##..") }, 5);
		System.out.println(time);

		time = b.shortestPath(new String[] { new String("#...###########.########.####..####.##..###..#.###"),
				new String("#.#.....#..#.######.#.###.#.####...##...#.###.##.#"),
				new String(".#########..####..#..#####....#####..#.##..###..##"),
				new String("...##..#..#..###.########.#.#.#....##..#.##.#####."),
				new String("##.#.###..#..##..##.########.#####.###.#..#..#####"),
				new String("##.######.#.##.#.##.#.######.###.#####.#.#.#######"),
				new String("#....#.##.#.##.#.###.#.#.####.#####.#.####..#.#..#"),
				new String("##...####...##.#..#####.###..####.##..##...####..."),
				new String("#.....##..######.#.#...#...####..#......#....#.###"),
				new String("#..######.#.#.##.....#.#...####.....##.####.#...##"),
				new String("#.#.##.###.#.#..#..#.##....##.##.##.#.#..###..#.#."),
				new String("..#.#######..#############.###...####..#.#.####..."),
				new String(".#.##.#.####.#.#.#####.#.#.##.#.######..##.#####.#"),
				new String("#...##.#####...##########..#####..##..##..##.####."),
				new String("#.#....#..#...##.##.#######...#.#######.##.###.#.#"),
				new String("..#.#.####.#############.####.####.#.#..###.####.#"),
				new String("#.#.######.###.##.##.####.####.####.########.##.##"),
				new String("#.#####.##.###.##.#..#.#.###.####.####.#.###..##.#"),
				new String("####.##.#.#..#####.##..#....#...#########.###.#.#."),
				new String(".#.#.#.###.##.##.####..#.......#####...###.####.##"),
				new String("#...####.##.#.##..#.#.##...#...#.##...#.###..#..##"),
				new String("..##.#.#..###.##.#...#.#...#.##.###.##..###...#.#."),
				new String(".#..##..#..#.#######.####.###..########..######.##"),
				new String("##....######..#.######.....#...##.#.#..##.####.#.."),
				new String("#####.######.####.#####.#.#..#####..##..#..####..#"),
				new String("#.#####.##.###..###.###..B##..##..#..#.#.###..##.#"),
				new String("##.#.#.######################...###.###..###.#####"),
				new String("..#..#.##.#######.##..#.###.###.#.##.###..##...##."),
				new String("####...###.#..####..#..#.###.###..#.###..#####..##"),
				new String("#..###.####...#.#.####.##.#..#..###.###.##########"),
				new String(".###....#...##..#####.##..#..##.###...#.###....##."),
				new String("####.##.#.##..#.#####.##....###.#.#..##...#.##..##"),
				new String("#..#..#.##.##...###.#.##.#.#.##...##..##..###..###"),
				new String("..###.####.##..#..###..##.###......#.#..##..#.#.#."),
				new String("#.##.##.#.#...##.#..###..###.#.#####..#.##.#...###"),
				new String("######.##..#######.#...##.##....###..#.#.##.######"),
				new String(".#.##..##.....####.##.#.##.##.#..##.######.##...##"),
				new String("##.###..####.###.##.#.######.#.###.###..######.###"),
				new String(".##.#..##.#########..###.##.###.######..#####....."),
				new String("######.##.#.####.###..#.##..##.##.#..##.#####....#"),
				new String("....######...##..#..#.#############.######...###.."),
				new String(".##.####...#...####.#####..#.#..##.###.#########.#"),
				new String("####..##..#####.#####.#.##.##.##..#.##..#.#.##.###"),
				new String(".#.###.###..##..#.#.##.######..#..###.##.#.#..#..."),
				new String("..##..######.#..###.#..#.########.###.#.##..#.#.#."),
				new String(".###...##.###..##.######.###.###...#####.###.##..#"),
				new String("#..##.#...#.#.##.##...#.###############....###.#.#"),
				new String("##.###...##..#.#.##.#..###...#.#####.###..##.#.###"),
				new String(".#.#####.....#####.####.#.#.##.######.#.#..##..###"),
				new String("E##...##.##..#.###.##.#..#..##...##.##..#.##...#..") }, 100);
		System.out.println(time);

	}


}
